# ==========================
# ===  General settings  ===
# ==========================
set-option -sa terminal-overrides ',screen-256color:RGB'
set -g default-terminal "screen-256color"
setw -g xterm-keys on
set -s focus-events on
set -g history-limit 50000000
set -g buffer-limit 20
set -sg escape-time 0
set -g display-time 1500
set -g remain-on-exit off
set -g repeat-time 300
setw -g allow-rename off
setw -g automatic-rename off
setw -g aggressive-resize on

# Change prefix key to C-a, easier to type, same to "screen"
unbind C-b
set -g prefix C-a

# Set parent terminal title to reflect current window in tmux session
set -g set-titles on
set -g set-titles-string "#I:#W"

# Start index of window/pane with 1, because we're humans, not computers
set -g base-index 1
setw -g pane-base-index 1

# Enable mouse support
set -g mouse on


# ==========================
# ===   Key bindings     ===
# ==========================

# Unbind default key bindings, we're going to override
unbind "\$" # rename-session
unbind ,    # rename-window
unbind %    # split-window -h
unbind '"'  # split-window
unbind '}'    # swap-pane -D
unbind '{'    # swap-pane -U
unbind [    # paste-buffer
unbind ]
unbind "'"  # select-window
unbind n    # next-window
unbind p    # previous-window
unbind l    # last-window
unbind M-n  # next window with alert
unbind M-p  # next window with alert
unbind o    # focus thru panes
unbind &    # kill-window
unbind "#"  # list-buffer
unbind =    # choose-buffer
unbind z    # zoom-pane
unbind M-Up  # resize 5 rows up
unbind M-Down # resize 5 rows down
unbind M-Right # resize 5 rows right
unbind M-Left # resize 5 rows left


# Edit configuration and reload
bind C-e new-window -n 'tmux.conf' "sh -c '\${EDITOR:-vim} ~/.config/tmux/tmux.conf && tmux source ~/.config/tmux/tmux.conf && tmux display \"Config reloaded\"'"

# Reload tmux configuration
bind C-R source-file ~/.config/tmux/tmux.conf \; display "Config reloaded"

# new window and retain cwd
bind c new-window -c "#{pane_current_path}"

# Prompt to rename window right after it's created
set-hook -g after-new-window 'command-prompt -I "#{window_name}" "rename-window '%%'"'

# Rename session and window
bind r command-prompt -I "#{window_name}" "rename-window '%%'"
bind R command-prompt -I "#{session_name}" "rename-session '%%'"
bind z run-shell 'tp'

# Split panes
bind | split-window -h -c "#{pane_current_path}"
bind _ split-window -v -c "#{pane_current_path}"

# Select pane and windows
bind -r C-[ previous-window
bind -r C-] next-window
bind -r [ select-pane -t :.-
bind -r ] select-pane -t :.+
bind -r C-Tab last-window   # cycle thru MRU tabs
bind -r C-o swap-pane -D

# pane resizing
bind -r H resize-pane -L 2
bind -r J resize-pane -D 2
bind -r K resize-pane -U 2
bind -r L resize-pane -R 2

# Zoom pane
bind + resize-pane -Z

# Link window
bind C-l command-prompt -p "Link window from (session:window): " "link-window -s %% -a"

# Swap panes back and forth with 1st pane
# When in main-(horizontal|vertical) layouts, the biggest/widest panel is always @1
bind '\' if '[ #{pane_index} -eq 1 ]' \
     'swap-pane -s "!"' \
     'select-pane -t:.1 ; swap-pane -d -t 1 -s "!"'

# Kill pane/window/session shortcuts
bind x kill-pane
bind X kill-window
bind C-x confirm-before -p "kill other windows? (y/n)" "kill-window -a"
bind Q confirm-before -p "kill-session #S? (y/n)" kill-session

# Merge session with another one (e.g. move all windows)
# If you use adhoc 1-window sessions, and you want to preserve session upon exit
# but don't want to create a lot of small unnamed 1-window sessions around
# move all windows from current session to main named one (dev, work, etc)
bind C-u command-prompt -p "Session to merge with: " \
   "run-shell 'yes | head -n #{session_windows} | xargs -I {} -n 1 tmux movew -t %%'"

# Detach from session
bind d detach
bind D if -F '#{session_many_attached}' \
    'confirm-before -p "Detach other clients? (y/n)" "detach -a"' \
    'display "Session has only 1 client attached"'

# Hide status bar on demand
bind C-s if -F '#{s/off//:status}' 'set status off' 'set status on'


# ==================================================
# === Window monitoring for activity and silence ===
# ==================================================
bind m setw monitor-activity \; display-message 'Monitor window activity [#{?monitor-activity,ON,OFF}]'
bind M if -F '#{monitor-silence}' \
    'setw monitor-silence 0 ; display-message "Monitor window silence [OFF]"' \
    'command-prompt -p "Monitor silence: interval (s)" "setw monitor-silence %%"'

# Activity bell and whistles
set -g visual-activity on


# ================================================
# ===     Copy mode, scroll and clipboard      ===
# ================================================
set -g @copy_use_osc52_fallback on

# Prefer vi style key table
setw -g mode-keys vi

bind p paste-buffer
bind C-p choose-buffer

# trigger copy mode by
bind -n M-Up copy-mode

# Scroll up/down by 1 line, half screen, whole screen
bind -T copy-mode-vi M-Up              send-keys -X scroll-up
bind -T copy-mode-vi M-Down            send-keys -X scroll-down
bind -T copy-mode-vi M-PageUp          send-keys -X halfpage-up
bind -T copy-mode-vi M-PageDown        send-keys -X halfpage-down
bind -T copy-mode-vi PageDown          send-keys -X page-down
bind -T copy-mode-vi PageUp            send-keys -X page-up

# When scrolling with mouse wheel, reduce number of scrolled rows per tick to "2" (default is 5)
bind -T copy-mode-vi WheelUpPane       select-pane \; send-keys -X -N 2 scroll-up
bind -T copy-mode-vi WheelDownPane     select-pane \; send-keys -X -N 2 scroll-down


# Copy selected text
bind -T copy-mode-vi Enter send-keys -X copy-selection-and-cancel
bind -T copy-mode-vi y send-keys -X copy-pipe-and-cancel
bind -T copy-mode-vi Y send-keys -X copy-line
bind-key -T copy-mode-vi D send-keys -X copy-end-of-line
bind -T copy-mode-vi C-j send-keys -X copy-pipe-and-cancel
bind-key -T copy-mode-vi A send-keys -X append-selection-and-cancel

# Copy selection on drag end event, but do not cancel copy mode and do not clear selection
# clear select on subsequence mouse click
bind -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe
bind -T copy-mode-vi MouseDown1Pane send-keys -X clear-selection

# =====================================
# ===    Appearence and status bar  ===
# ======================================


# general status bar settings
set -g status on
set -g status-position top
set -g status-interval 5
wg_session="#[fg=$color_session_text] #S #[default]"

##-----------
# theme
set -g status-style bg=default,fg=white
set -g window-status-current-style bg=black,fg=white,bold
set -g pane-border-style fg=white
set -g pane-active-border-style fg=colour39,bg=default
set -g mode-style bg=colour39,fg=white,bold
set -g status-interval 5

# Length of tmux status line
set -g status-left-length 30
set -g status-right-length 150

# Default statusbar color
set-option -g status-style bg=colour237,fg=colour223

setw -g window-status-format " #I:#W "
# Default window title colors
#[fg=colour237, bg=colour239] ÓÇ≤\
set-window-option -g window-status-style bg=colour92,fg=colour220

# Default window with an activity alert
set-window-option -g window-status-activity-style bg=colour237,fg=colour248

# Active window title colors
set-window-option -g window-status-current-style bg=red,fg=colour237

# when window has monitoring notification
setw -g window-status-activity-style fg=colour92
# Set active pane border color
set-option -g pane-active-border-style fg=colour92

# Set inactive pane border color
set-option -g pane-border-style fg=colour239

# Message info
set-option -g message-style bg=colour239,fg=colour223 # bg=bg2, fg=fg1

# Writing commands inactive
set-option -g message-command-style bg=colour239,fg=colour223 # bg=fg3, fg=bg1

# Pane number display
set-option -g display-panes-active-colour colour1 #fg2
set-option -g display-panes-colour colour237 #bg1

# Clock
set-window-option -g clock-mode-colour colour109 #blue

# Bell
set-window-option -g window-status-bell-style bg=colour167,fg=colour235 # bg=red, fg=bg

set-option -g status-left "\
#[fg=colour7, bg=colour241]#{?client_prefix,#[bg=colour167],} #{?window_zoomed_flag,üîç ,}#S \
#[fg=colour241, bg=colour237]#{?client_prefix,#[fg=colour167],}ÓÇ∞ \
#[fg=colour1]"

set-option -g status-right "\
#[fg=colour239, bg=colour237]ÓÇ≤\
#[fg=colour223, bg=colour239] #(gitmux -cfg ~/.config/tmux/gitmux.conf #{pane_current_path})\
#[fg=colour237, bg=colour239] ÓÇ≤\
#[fg=colour239, bg=colour237] ÓÇ≤\
#[fg=colour223, bg=colour239] #{cpu_fg_color}#{cpu_icon} #{battery_color_charge_fg}#[bg=colour239]#{battery_icon_charge}\
#[fg=colour237, bg=colour239] ÓÇ≤\
#[fg=colour241, bg=colour237] ÓÇ≤\
#[fg=colour7, bg=colour241] %a %d-%m %H:%M "

set-window-option -g window-status-current-format "\
#[fg=colour237, bg=colour92]ÓÇ∞\
#[fg=colour220, bg=colour92] #I* ÓÇ±\
#[fg=colour220, bg=colour92, bold] #W \
#[fg=colour92, bg=colour237]ÓÇ∞"

set-window-option -g window-status-format "\
#[fg=colour237,bg=colour239,noitalics]ÓÇ∞\
#[fg=colour223,bg=colour239] #I ÓÇ±\
#[fg=colour223, bg=colour239] #W \
#[fg=colour239, bg=colour237]ÓÇ∞"

# =====================================
# ===        Renew environment      ===
# =====================================
set -g update-environment \
  "DISPLAY\
  SSH_ASKPASS\
  SSH_AUTH_SOCK\
  SSH_AGENT_PID\
  SSH_CONNECTION\
  SSH_TTY\
  WINDOWID\
  XAUTHORITY\
  VSCODE_IPC_HOOK_CLI"

# ============================
# ===       Plugins        ===
# ============================
set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'tmux-plugins/tmux-copycat'
set -g @plugin 'tmux-plugins/tmux-resurrect'
set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @plugin 'nhdaly/tmux-better-mouse-mode'
set -g @plugin 'tmux-plugins/tmux-open'
set -g @plugin 'tmux-plugins/tmux-prefix-highlight'
set -g @plugin 'tmux-plugins/tmux-online-status'
set -g @plugin 'tmux-plugins/tmux-sidebar'
set -g @plugin 'laktak/extrakto'
set -g @plugin 'christoomey/vim-tmux-navigator'
set -g @plugin 'tmux-plugins/tmux-pain-control'
set -g @plugin 'sainnhe/tmux-fzf'
set -g @plugin 'tmux-plugins/tmux-cpu'
set -g @plugin 'tmux-plugins/tmux-battery'

# Plugin properties
set -g @sidebar-tree 't'
set -g @sidebar-tree-focus 'T'
set -g @sidebar-tree-command 'tree -C'
set -g @batt_icon_charge_tier8 '‚â£'
set -g @batt_icon_charge_tier7 '‚â£'
set -g @batt_icon_charge_tier6 '‚â°'
set -g @batt_icon_charge_tier5 '‚â°'
set -g @batt_icon_charge_tier4 '='
set -g @batt_icon_charge_tier3 '='
set -g @batt_icon_charge_tier2 '-'
set -g @batt_icon_charge_tier1 '-'
# ==============================================
# ===   Nesting local and remote sessions     ===
# ==============================================

# We want to have single prefix key "C-a", usable both for local and remote session
# we don't want to "C-a" + "a" approach either
# Idea is to turn off all key bindings and prefix handling on local session,
# so that all keystrokes are passed to inner/remote session

# see: toggle on/off all keybindings ¬∑ Issue #237 ¬∑ tmux/tmux - https://github.com/tmux/tmux/issues/237

# Also, change some visual styles when window keys are off
bind -T root F12  \
    set prefix None \;\
    set key-table off \;\
    set window-status-current-format "#[fg=colour238, bg=colour254]ÓÇ∞#[fg=colour238, bg=colour254] #I* ÓÇ±#[fg=colour238, bg=colour254, bold] #W #[fg=colour254, bg=colour238]ÓÇ∞" \;\
    if -F '#{pane_in_mode}' 'send-keys -X cancel' \;\
    set status-right "#[fg=colour239, bg=colour237] ÓÇ≤#[fg=colour223, bg=colour239] #{cpu_fg_color}#{cpu_icon} #{ram_fg_color}#{ram_icon} #{battery_color_fg}#[bg=colour239]#{battery_icon} " \;\
    set status-position bottom \;\
    set status-right "#[fg=colour239, bg=colour237] ÓÇ≤#[fg=colour223, bg=colour239] #{cpu_fg_color}#{cpu_icon} #{battery_color_charge_fg}#[bg=colour239]#{battery_icon_charge} " \;\
    set status-position bottom \;\
    refresh-client -S \;\

bind -T off F12 \
  set -u prefix \;\
  set -u key-table \;\
  set -u window-status-current-format \;\
  set -u status-right \;\
  set -u status-position \;\
  refresh-client -S

# Get TPM if not present, then run all plugins
if "test ! -d ~/.config/tmux/plugins/tpm" \
   "run 'git clone https://github.com/tmux-plugins/tpm ~/.config/tmux/plugins/tpm && ~/.config/tmux/plugins/tpm/bin/install_plugins'"
# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.config/tmux/plugins/tpm/tpm'
